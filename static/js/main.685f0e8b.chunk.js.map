{"version":3,"sources":["Component/Weather.js","Component/form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","city","country","className","time","icon","Math","round","temp","tempMax","tempMin","description","charAt","toUpperCase","slice","humidity","error","Form","onSubmit","getWeather","autoComplete","type","name","placeholder","API_KEY","App","state","undefined","bgs","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","cod","setState","sys","main","temp_min","temp_max","weather","dayOrNight","dt","sunrise","sunset","timezone","returnTime","getIcon","setBgImg","offset","date","Date","utc","getTime","getTimezoneOffset","amPm","toLocaleString","hour","minute","hour12","this","shiftedHour","getHours","lastTime","sunriseTime","sunsetTime","timeZone","lastHour","sunriseHour","sunsetHour","mode","desMain","bgImg","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gRAwCeA,G,MApCC,SAAAC,GAAK,OACb,6BACKA,EAAMC,MAAQD,EAAME,SACrB,oCACI,yBAAKC,UAAU,SAEX,wBAAIA,UAAU,aACTH,EAAMC,KADX,KACmBD,EAAME,SAGzB,wBAAIC,UAAU,QACTH,EAAMI,MAGX,wBAAID,UAAU,QACV,uBAAGA,UAAS,aAAQH,EAAMK,KAAd,iBAGhB,wBAAIF,UAAU,QAAQG,KAAKC,MAAMP,EAAMQ,MAAvC,QAEA,4BACI,0BAAML,UAAU,QAAQG,KAAKC,MAAMP,EAAMS,SAAzC,QACA,0BAAMN,UAAU,QAAQG,KAAKC,MAAMP,EAAMU,SAAzC,SAGJ,wBAAIP,UAAU,QACTH,EAAMW,YAAYC,OAAO,GAAGC,cAAgBb,EAAMW,YAAYG,MAAM,IAGzE,wBAAIX,UAAU,QAAQH,EAAMe,SAA5B,OAGPf,EAAMgB,OAAS,wBAAIb,UAAU,mBAAmBH,EAAMgB,UCbpDC,G,kBAlBF,SAAAjB,GAAK,OACd,yBAAKG,UAAU,aACX,0BAAMA,UAAU,OAAOe,SAAUlB,EAAMmB,YACnC,yBAAKhB,UAAU,OACX,yBAAKA,UAAU,wBACX,2BAAOiB,aAAa,MAAMC,KAAK,OAAOlB,UAAU,oBAAoBmB,KAAK,OAAOC,YAAY,UAEhG,yBAAKpB,UAAU,aACX,2BAAOiB,aAAa,MAAMC,KAAK,OAAOlB,UAAU,oBAAoBmB,KAAK,UAAUC,YAAY,aAEnG,yBAAKpB,UAAU,sCACX,4BAAQA,UAAU,mBAAlB,qBCPdqB,EAAU,mCA2LDC,E,4MAvLXC,MAAQ,CACJzB,UAAK0B,EACLzB,aAAQyB,EACRnB,UAAKmB,EACLZ,cAASY,EACTjB,aAAQiB,EACRlB,aAAQkB,EACRhB,YAAY,GACZN,UAAMsB,EACNC,IAAK,GACLZ,WAAMW,G,EAKVR,W,uCAAa,WAAOU,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACI9B,EAAO4B,EAAEG,OAAOC,SAAShC,KAAKiC,MAC9BhC,EAAU2B,EAAEG,OAAOC,SAAS/B,QAAQgC,MAHjC,SAIcC,MAAM,qDAAD,OAAsDlC,EAAtD,YAA8DC,EAA9D,kBAA+EsB,EAA/E,kBAJnB,cAIHY,EAJG,gBAKUA,EAASC,OALnB,OAKHC,EALG,OAQLrC,GAAQC,EAGQ,KAAZoC,EAAKC,IACL,EAAKC,SAAS,CACVvC,UAAK0B,EACLzB,aAAQyB,EACRnB,UAAKmB,EACLjB,aAAQiB,EACRlB,aAAQkB,EACRZ,cAASY,EACTX,MAAM,oBAKV,EAAKwB,SAAS,CACVvC,KAAMqC,EAAKhB,KACXpB,QAASoC,EAAKG,IAAIvC,QAClBM,KAAM8B,EAAKI,KAAKlC,KAChBE,QAAS4B,EAAKI,KAAKC,SACnBlC,QAAS6B,EAAKI,KAAKE,SACnB7B,SAAUuB,EAAKI,KAAK3B,SACpBJ,YAAa2B,EAAKO,QAAQ,GAAGlC,YAC7BK,MAAO,KAIX,EAAK8B,WAAWR,EAAKS,GAAIT,EAAKG,IAAIO,QAASV,EAAKG,IAAIQ,OAAQX,EAAKY,UACjE,EAAKC,WAAWb,EAAKY,UACrB,EAAKE,QAAQd,EAAKO,QAAQ,GAAGH,MAC7B,EAAKW,YAKT,EAAKb,SAAS,CACVvC,UAAM0B,EACNzB,aAASyB,EACTnB,UAAMmB,EACNjB,aAAQiB,EACRlB,aAAQkB,EACRZ,cAAUY,EACVhB,YAAa,GACbK,MAAO,sCApDN,4C,+GA0DFsC,GACP,IAAIC,EAAO,IAAIC,KACXC,EAAMF,EAAKG,UAAoC,IAAzBH,EAAKI,oBAE3BC,EADc,IAAIJ,KAAKC,EAAY,IAAPH,GACTO,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,IAC7FC,KAAKzB,SAAS,CAACpC,KAAMwD,M,kCAIbxD,EAAMkD,GACd,IAAIC,EAAO,IAAIC,KAAU,IAALpD,GAChBqD,EAAMF,EAAKG,UAAoC,IAAzBH,EAAKI,oBAE3BO,EADc,IAAIV,KAAKC,EAAY,IAAPH,GACFa,WAC9B,OAAOD,I,iCAIAE,EAAUC,EAAaC,EAAYC,GAE1C,IAAIC,EAAWP,KAAKC,YAAYE,EAAUG,GACtCE,EAAcR,KAAKC,YAAYG,EAAaE,GAC5CG,EAAaT,KAAKC,YAAYI,EAAYC,GAE7CC,EAASC,GAAeD,EAASE,EAAcT,KAAKzB,SAAS,CAACmC,KAAM,QAAUV,KAAKzB,SAAS,CAACmC,KAAM,Y,8BAKhGC,GAGJ,OAAOA,GACH,IAAK,eACDX,KAAKzB,SAAS,CAACnC,KAAM,kBAAmBuB,IAAK,SAG7C,MACJ,IAAK,UACDqC,KAAKzB,SAAS,CAACnC,KAAK,WAAYuB,IAAK,SACrC,MACJ,IAAK,OACDqC,KAAKzB,SAAS,CAACnC,KAAM,mBAAoBuB,IAAK,SAC9C,MACJ,IAAK,OACDqC,KAAKzB,SAAS,CAACnC,KAAM,UAAWuB,IAAK,SACrC,MACJ,IAAK,QACuB,QAApBqC,KAAKvC,MAAMiD,KACXV,KAAKzB,SAAS,CAACnC,KAAM,eAAgBuB,IAAK,UAEjB,UAApBqC,KAAKvC,MAAMiD,MAChBV,KAAKzB,SAAS,CAACnC,KAAM,iBAAkBuB,IAAK,UAChD,MACJ,IAAM,OACFqC,KAAKzB,SAAS,CAACnC,KAAM,SAAUuB,IAAK,QACpC,MACJ,QAC4B,QAApBqC,KAAKvC,MAAMiD,KACXV,KAAKzB,SAAS,CAACnC,KAAM,aAAcuB,IAAK,UAEf,UAApBqC,KAAKvC,MAAMiD,MAChBV,KAAKzB,SAAS,CAACnC,KAAM,eAAgBuB,IAAK,a,iCAMtD,GAAwB,QAApBqC,KAAKvC,MAAMiD,KACX,OAAOV,KAAKvC,MAAME,KACd,IAAK,OAASqC,KAAKzB,SAAS,CAACqC,MAAO,YAAa,MACjD,IAAK,OAASZ,KAAKzB,SAAS,CAACqC,MAAO,YAAa,MACjD,IAAK,QAAUZ,KAAKzB,SAAS,CAACqC,MAAO,aAAc,MACnD,IAAK,MAAQZ,KAAKzB,SAAS,CAACqC,MAAO,WAAY,MAC/C,QAASZ,KAAKzB,SAAS,CAACqC,MAAO,kBAElC,GAAuB,UAApBZ,KAAKvC,MAAMiD,KACf,OAAOV,KAAKvC,MAAME,KACd,IAAK,OAASqC,KAAKzB,SAAS,CAACqC,MAAO,cAAe,MACnD,IAAK,OAASZ,KAAKzB,SAAS,CAACqC,MAAO,cAAe,MACnD,IAAK,QAAUZ,KAAKzB,SAAS,CAACqC,MAAO,eAAgB,MACrD,IAAK,MAAQZ,KAAKzB,SAAS,CAACqC,MAAO,aAAc,MACjD,QAASZ,KAAKzB,SAAS,CAACqC,MAAO,kB,+BAQvC,OACI,yBAAK1E,UAAS,UAAK8D,KAAKvC,MAAMmD,MAAhB,SACV,kBAAC,EAAD,CAAM1D,WAAa8C,KAAK9C,aACxB,kBAAC,EAAD,CACIlB,KAAMgE,KAAKvC,MAAMzB,KACjBC,QAAS+D,KAAKvC,MAAMxB,QACpBM,KAAMyD,KAAKvC,MAAMlB,KACjBE,QAASuD,KAAKvC,MAAMhB,QACpBD,QAASwD,KAAKvC,MAAMjB,QACpBM,SAAUkD,KAAKvC,MAAMX,SACrBJ,YAAasD,KAAKvC,MAAMf,YACxBN,KAAM4D,KAAKvC,MAAMrB,KACjBD,KAAM6D,KAAKvC,MAAMtB,KACjBY,MAAOiD,KAAKvC,MAAMV,a,GAlLpB8D,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAKpF,UAAU,OACb,kBAAC,EAAD,QAGJqF,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhF,GACLiF,QAAQjF,MAAMA,EAAMkF,a","file":"static/js/main.685f0e8b.chunk.js","sourcesContent":["import React from 'react';\n\n//layouting city name, weather icons and other parameters with respect to the props recieved from App.js\n\nconst Weather = props => (\n        <div>\n            {props.city && props.country &&\n            <>\n                <div className='cards'>\n\n                    <h1 className='pb-2 px-3'>\n                        {props.city}, {props.country}\n                    </h1>\n\n                    <h3 className=\"py-2\">\n                        {props.time}\n                    </h3>\n\n                    <h5 className=\"py-3\">\n                        <i className={`wi ${props.icon} display-1`}/>\n                    </h5>\n\n                    <h1 className=\"py-2\">{Math.round(props.temp)}&deg;</h1>\n\n                    <h3>\n                        <span className='px-4'>{Math.round(props.tempMax)}&deg;</span>\n                        <span className='px-4'>{Math.round(props.tempMin)}&deg;</span>\n                    </h3>\n\n                    <h4 className=\"py-2\">\n                        {props.description.charAt(0).toUpperCase() + props.description.slice(1)}\n                    </h4>\n                    \n                    <h6 className='mb-5'>{props.humidity}%</h6>\n            </div>\n            </>}\n            {props.error && <h3 className='py-5 errorStyle'>{props.error}</h3> }\n        </div>\n)\n\nexport default Weather;","import React from 'react';\nimport './form.style.css';\n\n//layouting search field\n\nconst Form = props =>(\n    <div className='container'>\n        <form className='py-2' onSubmit={props.getWeather}>\n            <div className='row'>\n                <div className='col-md-3 offset-md-1'>\n                    <input autoComplete='off' type=\"text\" className='py-4 form-control' name=\"city\" placeholder=\"City\" />\n                </div>\n                <div className=\"col-md-3 \">\n                    <input autoComplete='off' type=\"text\" className='py-4 form-control' name=\"country\" placeholder=\"Country\" />\n                </div>\n                <div className=\"col-md-3 mt-md-0 text-md-left py-4\">\n                    <button className='btn btn-warning'>Get Weather</button>\n                </div>\n            </div>\n        </form>\n    </div>\n)\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from './Component/Weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './Component/form';\n\n//OpenWeatherMap API Key\n//Kindly replace the key with your API key from openweathermap website\nconst API_KEY = '2345b6b9a94b99293c96e0ab1c16618e';\n\nclass App extends React.Component{\n    //declaring states\n    state = {\n        city:undefined,\n        country:undefined,\n        temp:undefined,\n        humidity:undefined,\n        tempMin:undefined,\n        tempMax:undefined,\n        description:'',\n        icon: undefined,\n        bgs: '',\n        error:undefined\n    }\n\n    //fetching data from API and updating states\n    //default behaviour is prevented to avoid refreshing of the page while submiting the form\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n        const data = await api_call.json();\n\n        //if city and country is obtained from form component\n        if (city && country){\n            //if city is not found in the OpenWeatherMap directory\n            // eslint-disable-next-line (ignores warning)\n            if (data.cod == 404){\n                this.setState({\n                    city:undefined,\n                    country:undefined,\n                    temp:undefined,\n                    tempMin:undefined,\n                    tempMax:undefined,\n                    humidity:undefined,\n                    error:'City not found'\n                })\n            }\n            //if data is fetched from api properly,\n            else {\n                this.setState({\n                    city: data.name,\n                    country: data.sys.country,\n                    temp: data.main.temp,\n                    tempMin: data.main.temp_min,\n                    tempMax: data.main.temp_max,\n                    humidity: data.main.humidity,\n                    description: data.weather[0].description,\n                    error: ''\n                })\n                \n            //calling functions  \n                this.dayOrNight(data.dt, data.sys.sunrise, data.sys.sunset, data.timezone);\n                this.returnTime(data.timezone);\n                this.getIcon(data.weather[0].main);\n                this.setBgImg();\n            }\n        }\n        else{\n            //if form is submitted without city name or country name\n            this.setState({\n                city: undefined,\n                country: undefined,\n                temp: undefined,\n                tempMin:undefined,\n                tempMax:undefined,\n                humidity: undefined,\n                description: '',\n                error: 'Please Enter the city and country'\n            })             \n        }\n    }\n\n    //returns local time of the city by shifting timezone\n    returnTime(offset){\n        let date = new Date();\n        let utc = date.getTime()+(date.getTimezoneOffset()*60000);\n        let shiftedDate = new Date(utc+(offset*1000));\n        let amPm = shiftedDate.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n        this.setState({time: amPm});\n    }\n\n    //returns Hour of local time of the city by shifting timezone (called for last time from api, sunset time and sunrise time)\n    shiftedHour(time, offset){\n        let date = new Date(time*1000);\n        let utc = date.getTime()+(date.getTimezoneOffset()*60000);\n        let shiftedDate = new Date(utc+(offset*1000));\n        let shiftedHour = shiftedDate.getHours();\n        return shiftedHour;\n    }\n\n    //updates day/night by comparing current hour to sunrise time and sunset time\n    dayOrNight(lastTime, sunriseTime, sunsetTime, timeZone){\n\n        let lastHour = this.shiftedHour(lastTime, timeZone);\n        let sunriseHour = this.shiftedHour(sunriseTime, timeZone);\n        let sunsetHour = this.shiftedHour(sunsetTime, timeZone);\n\n        (lastHour>sunriseHour && lastHour<sunsetHour) ? this.setState({mode: 'day'}) : this.setState({mode: 'night'})\n    }\n\n\n    //selecting weather icon\n    getIcon(desMain){\n        //some icons uses mode (day/night) to select icon with sun/moon.\n        //icon state directly declares the class in icon library\n        switch(desMain){\n            case 'Thunderstorm':\n                this.setState({icon: 'wi-thunderstorm', bgs: 'rain'}) \n                //bgs: expand as background selector\n                //same bgs is selected for multiple icons (eg: bgs is 'rain' for 'Thunderstorm', 'Drizzle' and 'Rain')\n                break;\n            case 'Drizzle':\n                this.setState({icon:'wi-sleet', bgs: 'rain'})\n                break;\n            case 'Rain':\n                this.setState({icon: 'wi-storm-showers', bgs: 'rain'})\n                break;\n            case 'Snow':\n                this.setState({icon: 'wi-snow', bgs: 'snow'})\n                break;\n            case 'Clear':\n                if (this.state.mode === 'day'){\n                    this.setState({icon: 'wi-day-sunny', bgs: 'clear'})\n                }\n                else if (this.state.mode === 'night') {\n                    this.setState({icon: 'wi-night-clear', bgs: 'clear'})}\n                break;\n            case ('Mist' || 'Smoke' || 'Haze' || 'Dust' || 'Fog' || 'Sand' || 'Dust' || 'Ash' || 'Squall' || 'Tornado'):\n                this.setState({icon: 'wi-fog', bgs: 'fog'})\n                break;\n            default:\n                if (this.state.mode === 'day'){\n                    this.setState({icon: 'wi-day-fog', bgs: 'cloud'})\n                }\n                else if (this.state.mode === 'night') {\n                    this.setState({icon: 'wi-night-fog', bgs: 'cloud'})}\n        }\n    }\n\n    //updating state to select background image with respect to mode(day/ =night) and weather (this will be passsed as classname)\n    setBgImg(){\n        if (this.state.mode === 'day'){\n            switch(this.state.bgs){\n                case 'rain' : this.setState({bgImg: 'dayRain'}); break;\n                case 'snow' : this.setState({bgImg: 'daySnow'}); break;\n                case 'clear' : this.setState({bgImg: 'dayClear'}); break;\n                case 'fog' : this.setState({bgImg: 'dayFog'}); break;\n                default: this.setState({bgImg: 'dayCloud'});\n            }}\n        else if(this.state.mode === 'night'){\n            switch(this.state.bgs){\n                case 'rain' : this.setState({bgImg: 'nightRain'}); break;\n                case 'snow' : this.setState({bgImg: 'nightSnow'}); break;\n                case 'clear' : this.setState({bgImg: 'nightClear'}); break;\n                case 'fog' : this.setState({bgImg: 'nightFog'}); break;\n                default: this.setState({bgImg: 'nightCloud'});\n            }\n        }\n    \n    }\n    \n\n    render(){\n        return(\n            <div className={`${this.state.bgImg} App`}>\n                <Form getWeather= {this.getWeather} />\n                <Weather\n                    city={this.state.city}\n                    country={this.state.country}\n                    temp={this.state.temp}\n                    tempMin={this.state.tempMin}\n                    tempMax={this.state.tempMax}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    icon={this.state.icon}\n                    time={this.state.time}\n                    error={this.state.error}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className='App'>\n      <App/>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}